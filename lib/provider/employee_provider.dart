import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:payroll_app/model/Employee.dart';

class EmployeeProvider extends ChangeNotifier {
  final Dio _dio = Dio();
  final String _baseUrl = 'http://localhost:8080';

  List<Employee> employees = [];
  bool isLoading = false;

  EmployeeProvider({required BuildContext context}) {
    getEmployees();
  }

  Future<void> getEmployees() async {
    isLoading = true;
    notifyListeners();
    try {
      final Response response = await _dio.get('$_baseUrl/employees');
      employees = (response.data as List)
          .map((json) => Employee.fromJson(json))
          .toList();
    } catch (e) {
      debugPrint('Error fetching employees: $e');
    }
    isLoading = false;
    notifyListeners();
  }

  Future<void> deleteEmployee(int employeeId) async {
    try {
      final response = await Dio().delete('$_baseUrl/employees/$employeeId');
      if (response.statusCode == 200) {
        employees.removeWhere((employee) => employee.employeeId == employeeId);
        notifyListeners();
      } else {
        throw Exception('Failed to delete employee');
      }
    } catch (e) {
      print('Error deleting employee: $e');
    }
  }

  Future<void> addEmployee(Employee employee) async {
    try {
      // Sending data without employeeId, as it will be auto-generated by the backend
      final Response response =
          await _dio.post('$_baseUrl/employees', data: employee.toJson());

      if (response.statusCode == 201) {
        // The backend will return the full employee object, including the generated employeeId
        Employee newEmployee = Employee.fromJson(response.data);
        employees.add(
            newEmployee); // Add the new employee with the generated employeeId
        notifyListeners();
      }
    } catch (e) {
      print('Error adding employee: $e');
    }
  }

  Future<void> updateEmployee(Employee employee) async {
    try {
      final Response response = await _dio.put(
          '$_baseUrl/employees/${employee.employeeId}',
          data: employee.toJson());
      if (response.statusCode == 200) {
        final index =
            employees.indexWhere((e) => e.employeeId == employee.employeeId);
        if (index != -1) {
          employees[index] = employee;
          notifyListeners();
        }
      } else {
        print('Failed to update employee, status code: ${response.statusCode}');
        print('Response: ${response.data}');
      }
    } catch (e) {
      if (e is DioError) {
        // Log the error response from Dio
        print('Error details: ${e.response?.data}');
      }
      print('Error updating Employee: ' + e.toString());
    }
  }
}
